name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-2                      # set this to your preferred AWS region
  ECR_REPOSITORY_CLIENT: spicecraft-client        # set this to your Amazon ECR repository name for client
  ECR_REPOSITORY_SERVER: spicecraft-server        # set this to your Amazon ECR repository name for server
  ECS_SERVICE: spicecraft-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: spicecraft-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-definition.json   # set this to the path to your Amazon ECS task definition file

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./terraform

    - name: Plan Terraform
      id: terraform_plan
      run: terraform plan -no-color -out=tfplan
      working-directory: ./terraform

    - name: Apply Terraform if changes are detected
      if: steps.terraform_plan.outputs.changes_present == 'true'
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        IMAGE_TAG: ${{ github.sha }}
        EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
        TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
        SECURITY_GROUP: ${{ secrets.SECURITY_GROUP }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        docker-compose build
        docker tag spicecraft-client:latest $ECR_REGISTRY/${{ env.ECR_REPOSITORY_CLIENT }}:${{ env.IMAGE_TAG }}
        docker tag spicecraft-server:latest $ECR_REGISTRY/${{ env.ECR_REPOSITORY_SERVER }}:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_CLIENT }}:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_SERVER }}:${{ env.IMAGE_TAG }}
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Fill in the new image IDs in the Amazon ECS task definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ env.AWS_REGION }}
      id: update-task-def
      run: |
        sed -i 's|\${AWS_ACCOUNT_ID}|${{ env.AWS_ACCOUNT_ID }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|\${AWS_REGION}|${{ env.AWS_REGION }}|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g' ${{ env.ECS_TASK_DEFINITION }}

    - name: Deploy updated task definition to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
